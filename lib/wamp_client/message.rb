require 'wamp_client/check'

# !!!!THIS FILE IS AUTOGENERATED.  DO NOT HAND EDIT!!!!

module WampClient
  module Message

    class Message
      include WampClient::Check

      HELLO = 1
      WELCOME = 2
      ABORT = 3
      GOODBYE = 6
      ERROR = 8
      PUBLISH = 16
      PUBLISHED = 17
      SUBSCRIBE = 32
      SUBSCRIBED = 33
      UNSUBSCRIBE = 34
      UNSUBSCRIBED = 35
      EVENT = 36
      CALL = 48
      RESULT = 50
      REGISTER = 64
      REGISTERED = 65
      UNREGISTER = 66
      UNREGISTERED = 67
      INVOCATION = 68
      YIELD = 70

      def payload
        []
      end

      # @param params [Array]
      def self.parse(params)
        Message.new
      end

    end
    # [HELLO, Realm|uri, Details|dict]

    # Hello
    # Sent by a Client to initiate opening of a WAMP session to a Router attaching to a Realm.
    class Hello < Message
      @realm
      @details

      def initialize(realm, details)

        self.class.check_uri('realm', realm)
        self.class.check_dict('details', details)

        @realm = realm
        @details = details

      end

      def self.type
        HELLO
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@realm)
        payload.push(@details)

        payload
      end

      def realm
        @realm
      end

      def details
        @details
      end

    end
    # [WELCOME, Session|id, Details|dict]

    # Welcome
    # Sent by a Router to accept a Client.  The WAMP session is now open.
    class Welcome < Message
      @session
      @details

      def initialize(session, details)

        self.class.check_id('session', session)
        self.class.check_dict('details', details)

        @session = session
        @details = details

      end

      def self.type
        WELCOME
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@session)
        payload.push(@details)

        payload
      end

      def session
        @session
      end

      def details
        @details
      end

    end
    # [ABORT, Details|dict, Reason|uri]

    # Abort
    # Sent by a Peer*to abort the opening of a WAMP session.  No response is expected.
    class Abort < Message
      @details
      @reason

      def initialize(details, reason)

        self.class.check_dict('details', details)
        self.class.check_uri('reason', reason)

        @details = details
        @reason = reason

      end

      def self.type
        ABORT
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@details)
        payload.push(@reason)

        payload
      end

      def details
        @details
      end

      def reason
        @reason
      end

    end
    # [GOODBYE, Details|dict, Reason|uri]

    # Goodbye
    # Sent by a Peer to close a previously opened WAMP session.  Must be echo'ed by the receiving Peer.
    class Goodbye < Message
      @details
      @reason

      def initialize(details, reason)

        self.class.check_dict('details', details)
        self.class.check_uri('reason', reason)

        @details = details
        @reason = reason

      end

      def self.type
        GOODBYE
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@details)
        payload.push(@reason)

        payload
      end

      def details
        @details
      end

      def reason
        @reason
      end

    end
    # [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri]
    # [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri, Arguments|list]
    # [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict, Error|uri, Arguments|list, ArgumentsKw|dict]

    # Error
    # Error reply sent by a Peer as an error response to different kinds of requests.
    class Error < Message
      @request_type
      @request_request
      @details
      @error
      @arguments
      @argumentskw

      def initialize(request_type, request_request, details, error, arguments=nil, argumentskw=nil)

        self.class.check_int('request_type', request_type)
        self.class.check_id('request_request', request_request)
        self.class.check_dict('details', details)
        self.class.check_uri('error', error)
        self.class.check_list('arguments', arguments, true)
        self.class.check_dict('argumentskw', argumentskw, true)

        @request_type = request_type
        @request_request = request_request
        @details = details
        @error = error
        @arguments = arguments
        @argumentskw = argumentskw

      end

      def self.type
        ERROR
      end

      def self.parse(params)

        self.check_gte('params list', 5, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request_type)
        payload.push(@request_request)
        payload.push(@details)
        payload.push(@error)

        return payload if @arguments.nil?
        payload.push(@arguments)

        return payload if @argumentskw.nil?
        payload.push(@argumentskw)

        payload
      end

      def request_type
        @request_type
      end

      def request_request
        @request_request
      end

      def details
        @details
      end

      def error
        @error
      end

      def arguments
        @arguments
      end

      def argumentskw
        @argumentskw
      end

    end
    # [PUBLISH, Request|id, Options|dict, Topic|uri]
    # [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list]
    # [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list, ArgumentsKw|dict]

    # Publish
    # Sent by a Publisher to a Broker to publish an event.
    class Publish < Message
      @request
      @options
      @topic
      @arguments
      @argumentskw

      def initialize(request, options, topic, arguments=nil, argumentskw=nil)

        self.class.check_id('request', request)
        self.class.check_dict('options', options)
        self.class.check_uri('topic', topic)
        self.class.check_list('arguments', arguments, true)
        self.class.check_dict('argumentskw', argumentskw, true)

        @request = request
        @options = options
        @topic = topic
        @arguments = arguments
        @argumentskw = argumentskw

      end

      def self.type
        PUBLISH
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@options)
        payload.push(@topic)

        return payload if @arguments.nil?
        payload.push(@arguments)

        return payload if @argumentskw.nil?
        payload.push(@argumentskw)

        payload
      end

      def request
        @request
      end

      def options
        @options
      end

      def topic
        @topic
      end

      def arguments
        @arguments
      end

      def argumentskw
        @argumentskw
      end

    end
    # [PUBLISHED, PUBLISH.Request|id, Publication|id]

    # Published
    # Acknowledge sent by a Broker to a Publisher for acknowledged publications.
    class Published < Message
      @publish_request
      @publication

      def initialize(publish_request, publication)

        self.class.check_id('publish_request', publish_request)
        self.class.check_id('publication', publication)

        @publish_request = publish_request
        @publication = publication

      end

      def self.type
        PUBLISHED
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@publish_request)
        payload.push(@publication)

        payload
      end

      def publish_request
        @publish_request
      end

      def publication
        @publication
      end

    end
    # [SUBSCRIBE, Request|id, Options|dict, Topic|uri]

    # Subscribe
    # Subscribe request sent by a Subscriber to a Broker to subscribe to a topic.
    class Subscribe < Message
      @request
      @options
      @topic

      def initialize(request, options, topic)

        self.class.check_id('request', request)
        self.class.check_dict('options', options)
        self.class.check_uri('topic', topic)

        @request = request
        @options = options
        @topic = topic

      end

      def self.type
        SUBSCRIBE
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@options)
        payload.push(@topic)

        payload
      end

      def request
        @request
      end

      def options
        @options
      end

      def topic
        @topic
      end

    end
    # [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]

    # Subscribed
    # Acknowledge sent by a Broker to a Subscriber to acknowledge a subscription.
    class Subscribed < Message
      @subscribe_request
      @subscription

      def initialize(subscribe_request, subscription)

        self.class.check_id('subscribe_request', subscribe_request)
        self.class.check_id('subscription', subscription)

        @subscribe_request = subscribe_request
        @subscription = subscription

      end

      def self.type
        SUBSCRIBED
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@subscribe_request)
        payload.push(@subscription)

        payload
      end

      def subscribe_request
        @subscribe_request
      end

      def subscription
        @subscription
      end

    end
    # [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]

    # Unsubscribe
    # Unsubscribe request sent by a Subscriber to a Broker to unsubscribe a subscription.
    class Unsubscribe < Message
      @request
      @subscribed_subscription

      def initialize(request, subscribed_subscription)

        self.class.check_id('request', request)
        self.class.check_id('subscribed_subscription', subscribed_subscription)

        @request = request
        @subscribed_subscription = subscribed_subscription

      end

      def self.type
        UNSUBSCRIBE
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@subscribed_subscription)

        payload
      end

      def request
        @request
      end

      def subscribed_subscription
        @subscribed_subscription
      end

    end
    # [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]

    # Unsubscribed
    # Acknowledge sent by a Broker to a Subscriber to acknowledge unsubscription.
    class Unsubscribed < Message
      @unsubscribe_request

      def initialize(unsubscribe_request)

        self.class.check_id('unsubscribe_request', unsubscribe_request)

        @unsubscribe_request = unsubscribe_request

      end

      def self.type
        UNSUBSCRIBED
      end

      def self.parse(params)

        self.check_gte('params list', 2, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@unsubscribe_request)

        payload
      end

      def unsubscribe_request
        @unsubscribe_request
      end

    end
    # [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict]
    # [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict, PUBLISH.Arguments|list]
    # [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id, Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentsKw|dict]

    # Event
    # Event dispatched by Broker to Subscribers for subscriptions the event was matching.
    class Event < Message
      @subscribed_subscription
      @published_publication
      @details
      @publish_arguments
      @publish_argumentskw

      def initialize(subscribed_subscription, published_publication, details, publish_arguments=nil, publish_argumentskw=nil)

        self.class.check_id('subscribed_subscription', subscribed_subscription)
        self.class.check_id('published_publication', published_publication)
        self.class.check_dict('details', details)
        self.class.check_list('publish_arguments', publish_arguments, true)
        self.class.check_dict('publish_argumentskw', publish_argumentskw, true)

        @subscribed_subscription = subscribed_subscription
        @published_publication = published_publication
        @details = details
        @publish_arguments = publish_arguments
        @publish_argumentskw = publish_argumentskw

      end

      def self.type
        EVENT
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@subscribed_subscription)
        payload.push(@published_publication)
        payload.push(@details)

        return payload if @publish_arguments.nil?
        payload.push(@publish_arguments)

        return payload if @publish_argumentskw.nil?
        payload.push(@publish_argumentskw)

        payload
      end

      def subscribed_subscription
        @subscribed_subscription
      end

      def published_publication
        @published_publication
      end

      def details
        @details
      end

      def publish_arguments
        @publish_arguments
      end

      def publish_argumentskw
        @publish_argumentskw
      end

    end
    # [CALL, Request|id, Options|dict, Procedure|uri]
    # [CALL, Request|id, Options|dict, Procedure|uri, Arguments|list]
    # [CALL, Request|id, Options|dict, Procedure|uri, Arguments|list, ArgumentsKw|dict]

    # Call
    # Call as originally issued by the _Caller_ to the _Dealer_.
    class Call < Message
      @request
      @options
      @procedure
      @arguments
      @argumentskw

      def initialize(request, options, procedure, arguments=nil, argumentskw=nil)

        self.class.check_id('request', request)
        self.class.check_dict('options', options)
        self.class.check_uri('procedure', procedure)
        self.class.check_list('arguments', arguments, true)
        self.class.check_dict('argumentskw', argumentskw, true)

        @request = request
        @options = options
        @procedure = procedure
        @arguments = arguments
        @argumentskw = argumentskw

      end

      def self.type
        CALL
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@options)
        payload.push(@procedure)

        return payload if @arguments.nil?
        payload.push(@arguments)

        return payload if @argumentskw.nil?
        payload.push(@argumentskw)

        payload
      end

      def request
        @request
      end

      def options
        @options
      end

      def procedure
        @procedure
      end

      def arguments
        @arguments
      end

      def argumentskw
        @argumentskw
      end

    end
    # [RESULT, CALL.Request|id, Details|dict]
    # [RESULT, CALL.Request|id, Details|dict, YIELD.Arguments|list]
    # [RESULT, CALL.Request|id, Details|dict, YIELD.Arguments|list, YIELD.ArgumentsKw|dict]

    # Result
    # Result of a call as returned by _Dealer_ to _Caller_.
    class Result < Message
      @call_request
      @details
      @yield_arguments
      @yield_argumentskw

      def initialize(call_request, details, yield_arguments=nil, yield_argumentskw=nil)

        self.class.check_id('call_request', call_request)
        self.class.check_dict('details', details)
        self.class.check_list('yield_arguments', yield_arguments, true)
        self.class.check_dict('yield_argumentskw', yield_argumentskw, true)

        @call_request = call_request
        @details = details
        @yield_arguments = yield_arguments
        @yield_argumentskw = yield_argumentskw

      end

      def self.type
        RESULT
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@call_request)
        payload.push(@details)

        return payload if @yield_arguments.nil?
        payload.push(@yield_arguments)

        return payload if @yield_argumentskw.nil?
        payload.push(@yield_argumentskw)

        payload
      end

      def call_request
        @call_request
      end

      def details
        @details
      end

      def yield_arguments
        @yield_arguments
      end

      def yield_argumentskw
        @yield_argumentskw
      end

    end
    # [REGISTER, Request|id, Options|dict, Procedure|uri]

    # Register
    # A _Callees_ request to register an endpoint at a _Dealer_.
    class Register < Message
      @request
      @options
      @procedure

      def initialize(request, options, procedure)

        self.class.check_id('request', request)
        self.class.check_dict('options', options)
        self.class.check_uri('procedure', procedure)

        @request = request
        @options = options
        @procedure = procedure

      end

      def self.type
        REGISTER
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@options)
        payload.push(@procedure)

        payload
      end

      def request
        @request
      end

      def options
        @options
      end

      def procedure
        @procedure
      end

    end
    # [REGISTERED, REGISTER.Request|id, Registration|id]

    # Registered
    # Acknowledge sent by a _Dealer_ to a _Callee_ for successful registration.
    class Registered < Message
      @register_request
      @registration

      def initialize(register_request, registration)

        self.class.check_id('register_request', register_request)
        self.class.check_id('registration', registration)

        @register_request = register_request
        @registration = registration

      end

      def self.type
        REGISTERED
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@register_request)
        payload.push(@registration)

        payload
      end

      def register_request
        @register_request
      end

      def registration
        @registration
      end

    end
    # [UNREGISTER, Request|id, REGISTERED.Registration|id]

    # Unregister
    # A _Callees_ request to unregister a previously established registration.
    class Unregister < Message
      @request
      @registered_registration

      def initialize(request, registered_registration)

        self.class.check_id('request', request)
        self.class.check_id('registered_registration', registered_registration)

        @request = request
        @registered_registration = registered_registration

      end

      def self.type
        UNREGISTER
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@registered_registration)

        payload
      end

      def request
        @request
      end

      def registered_registration
        @registered_registration
      end

    end
    # [UNREGISTERED, UNREGISTER.Request|id]

    # Unregistered
    # Acknowledge sent by a _Dealer_ to a _Callee_ for successful unregistration.
    class Unregistered < Message
      @unregister_request

      def initialize(unregister_request)

        self.class.check_id('unregister_request', unregister_request)

        @unregister_request = unregister_request

      end

      def self.type
        UNREGISTERED
      end

      def self.parse(params)

        self.check_gte('params list', 2, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@unregister_request)

        payload
      end

      def unregister_request
        @unregister_request
      end

    end
    # [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict]
    # [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict, CALL.Arguments|list]
    # [INVOCATION, Request|id, REGISTERED.Registration|id, Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]

    # Invocation
    # Actual invocation of an endpoint sent by _Dealer_ to a _Callee_.
    class Invocation < Message
      @request
      @registered_registration
      @details
      @call_arguments
      @call_argumentskw

      def initialize(request, registered_registration, details, call_arguments=nil, call_argumentskw=nil)

        self.class.check_id('request', request)
        self.class.check_id('registered_registration', registered_registration)
        self.class.check_dict('details', details)
        self.class.check_list('call_arguments', call_arguments, true)
        self.class.check_dict('call_argumentskw', call_argumentskw, true)

        @request = request
        @registered_registration = registered_registration
        @details = details
        @call_arguments = call_arguments
        @call_argumentskw = call_argumentskw

      end

      def self.type
        INVOCATION
      end

      def self.parse(params)

        self.check_gte('params list', 4, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@request)
        payload.push(@registered_registration)
        payload.push(@details)

        return payload if @call_arguments.nil?
        payload.push(@call_arguments)

        return payload if @call_argumentskw.nil?
        payload.push(@call_argumentskw)

        payload
      end

      def request
        @request
      end

      def registered_registration
        @registered_registration
      end

      def details
        @details
      end

      def call_arguments
        @call_arguments
      end

      def call_argumentskw
        @call_argumentskw
      end

    end
    # [YIELD, INVOCATION.Request|id, Options|dict]
    # [YIELD, INVOCATION.Request|id, Options|dict, Arguments|list]
    # [YIELD, INVOCATION.Request|id, Options|dict, Arguments|list, ArgumentsKw|dict]

    # Yield
    # Actual yield from an endpoint sent by a _Callee_ to _Dealer_.
    class Yield < Message
      @invocation_request
      @options
      @arguments
      @argumentskw

      def initialize(invocation_request, options, arguments=nil, argumentskw=nil)

        self.class.check_id('invocation_request', invocation_request)
        self.class.check_dict('options', options)
        self.class.check_list('arguments', arguments, true)
        self.class.check_dict('argumentskw', argumentskw, true)

        @invocation_request = invocation_request
        @options = options
        @arguments = arguments
        @argumentskw = argumentskw

      end

      def self.type
        YIELD
      end

      def self.parse(params)

        self.check_gte('params list', 3, params.count)
        self.check_equal('message type', self.type, params[0])

        params.shift
        self.new(*params)

      end

      def payload
        payload = [self.class.type]
        payload.push(@invocation_request)
        payload.push(@options)

        return payload if @arguments.nil?
        payload.push(@arguments)

        return payload if @argumentskw.nil?
        payload.push(@argumentskw)

        payload
      end

      def invocation_request
        @invocation_request
      end

      def options
        @options
      end

      def arguments
        @arguments
      end

      def argumentskw
        @argumentskw
      end

    end

  end
end